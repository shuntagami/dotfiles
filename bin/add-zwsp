#!/usr/bin/env ruby
# frozen_string_literal: true
#
# add_zwsp_and_spaces_inplace.rb
#
# 各行末に「ZERO WIDTH SPACE + 半角スペース×2」を付与。
# 既に付与済み／空行／Markdown が自動改行扱いする行はスキップ。
# 同じファイルを直接上書きし、再実行しても差分の出ない idempotent 仕様。
# ------------------------------------------------------------

ZERO_WIDTH_SPACE = "\u200B"
LINE_BREAK       = "#{ZERO_WIDTH_SPACE}  "   # => "\u200B␣␣"

AUTO_BREAK_PATTERNS = [
  /^\s*$/,          # 空行
  /^\s*#/,          # 見出し (#, ##, …)
  /^\s*[-+*]\s+/,   # 箇条書き (-, +, *)
  /^\s*\d+\.\s+/,   # 番号付きリスト (1. 2. …)
  /^\s*>/,          # 引用 (>)
  /^\s*```/,        # コードフェンス (```)
].freeze

def auto_break_line?(line)
  AUTO_BREAK_PATTERNS.any? { |re| re.match?(line) }
end

def already_processed?(line)
  line.end_with?(LINE_BREAK)
end

def add_line_break(lines)
  lines.map do |raw|
    body    = raw.chomp
    newline = raw[-1] == "\n"   # 元行に改行があったか

    # スキップ条件
    if already_processed?(body) || auto_break_line?(body)
      raw
    else
      "#{body}#{LINE_BREAK}#{newline ? "\n" : ""}"
    end
  end
end

def main
  unless ARGV.size == 1
    warn "Usage: ruby #{File.basename(__FILE__)} TARGET_FILE"
    exit 1
  end

  path = ARGV.first
  unless File.file?(path)
    warn "File not found: #{path}"
    exit 1
  end

  original  = File.readlines(path, encoding: "UTF-8")
  processed = add_line_break(original)

  if processed != original
    File.write(path, processed.join, encoding: "UTF-8")
    puts "✅ Updated: #{path}"
  else
    puts "ℹ️  No changes: #{path}"
  end
end

main if $PROGRAM_NAME == __FILE__

